name: Release Management

permissions:
  contents: write
  packages: write
  deployments: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog for ${{ steps.version.outputs.version }}"
          
          # Get the latest tag before current
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "First release - getting all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Getting commits since $PREVIOUS_TAG"
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt

  # Build release assets
  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create release package
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PACKAGE_NAME="viking-mercenaries-$VERSION"
          
          mkdir -p release-assets
          
          # Create source code archive
          git archive --format=zip --prefix=$PACKAGE_NAME/ HEAD > release-assets/$PACKAGE_NAME-source.zip
          
          # Create production build archive
          mkdir -p $PACKAGE_NAME
          cp -r dist/ $PACKAGE_NAME/
          cp -r client/dist/ $PACKAGE_NAME/client-dist/
          cp package*.json $PACKAGE_NAME/
          cp LICENSE $PACKAGE_NAME/
          cp README.md $PACKAGE_NAME/
          
          # Create installation script
          cat > $PACKAGE_NAME/install.sh << 'EOF'
          #!/bin/bash
          echo "🏴‍☠️ Installing Viking Mercenaries..."
          npm install --production
          echo "⚔️ Installation complete!"
          echo "Run 'npm start' to launch the game"
          EOF
          chmod +x $PACKAGE_NAME/install.sh
          
          # Create production archive
          zip -r release-assets/$PACKAGE_NAME-production.zip $PACKAGE_NAME/
          
          # Create checksums
          cd release-assets
          sha256sum *.zip > checksums.txt
          cd ..

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets/

      - name: Create release notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          cat > release-notes.md << EOF
          # Viking Mercenaries $VERSION 🏴‍☠️

          ## What's New
          
          ${{ needs.validate-release.outputs.changelog }}

          ## 🚀 Installation

          ### Option 1: Download Production Build
          1. Download \`viking-mercenaries-$VERSION-production.zip\`
          2. Extract the archive
          3. Run \`./install.sh\` (or \`npm install --production\`)
          4. Start with \`npm start\`

          ### Option 2: Build from Source
          1. Download \`viking-mercenaries-$VERSION-source.zip\`
          2. Extract and install dependencies: \`npm install\`
          3. Build the application: \`npm run build\`
          4. Start the server: \`npm start\`

          ## 🎮 Game Features
          - ⚔️ Command Viking mercenaries in tactical combat
          - 💰 Earn both gold and TON cryptocurrency
          - 🏺 Recruit from 6 unique warrior types
          - 🗺️ Accept raid contracts of varying difficulty
          - 📈 Level up mercenaries and equipment

          ## 🛠️ System Requirements
          - Node.js 18+
          - PostgreSQL database
          - Modern web browser with WebGL support
          - TON wallet (optional, demo mode available)

          ## 🔧 Technical Details
          - **Frontend**: React + Three.js + TypeScript
          - **Backend**: Node.js + Express + PostgreSQL
          - **Blockchain**: TON Network integration
          - **Graphics**: 3D rendering with @react-three/fiber

          ## 📞 Support
          - **Issues**: [GitHub Issues](https://github.com/yourorg/viking-mercenaries/issues)
          - **Documentation**: [README](https://github.com/yourorg/viking-mercenaries#readme)
          - **Contributing**: [Contributing Guide](https://github.com/yourorg/viking-mercenaries/blob/main/CONTRIBUTING.md)

          ---
          **Ready your axes and gather your warriors - Valhalla awaits!** ⚔️
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Viking Mercenaries ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            release-assets/*
          generate_release_notes: false

  # Notify release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success()
    steps:
      - name: Notify Success
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🎉 Successfully released Viking Mercenaries $VERSION!"
          
          # Add Discord/Slack notifications here if needed
          # curl -H "Content-Type: application/json" \
          #   -d "{\"content\":\"🏴‍☠️ Viking Mercenaries $VERSION has been released! ⚔️\"}" \
          #   ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Deploy release to production
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success() && !github.event.inputs.prerelease
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying ${{ needs.validate-release.outputs.version }} to production..."
          
          # Add production deployment steps here
          # This could trigger the deploy.yml workflow or
          # directly deploy to your hosting platform
          
          echo "✅ Production deployment initiated"

  # Update package version
  update-version:
    name: Update Package Version
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success() && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update package.json version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix for package.json
          PACKAGE_VERSION=${VERSION#v}
          
          npm version $PACKAGE_VERSION --no-git-tag-version
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to $VERSION [skip ci]" || exit 0
          git push