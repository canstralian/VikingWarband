name: CI/CD Pipeline

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run check

      - name: Run ESLint (if configured)
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0
          else
            echo "ESLint not configured, skipping..."
          fi
        continue-on-error: false

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build client
        run: npm run build
        env:
          NODE_ENV: production

      - name: Test server startup
        run: |
          timeout 10s npm start &
          sleep 5
          if ! curl -f http://localhost:3000/health 2>/dev/null; then
            echo "Health check endpoint not available, checking if server starts"
            pkill -f "node dist/index.js" || true
          else
            echo "✅ Server started successfully"
            pkill -f "node dist/index.js" || true
          fi
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            client/dist/
          retention-days: 7

  # Database Schema Validation
  database:
    name: Database Schema Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: viking_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database schema validation
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/viking_test

  # Test Suite (when tests are added)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: viking_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          if [ -f "jest.config.js" ] || [ -f "vitest.config.ts" ] || grep -q '"test"' package.json; then
            npm test
          else
            echo "No test configuration found, creating placeholder test..."
            echo "Tests will be implemented in future iterations"
          fi
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/viking_test

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          if npm audit --audit-level high; then
            echo "✅ No high or critical vulnerabilities found"
          else
            echo "⚠️ High or critical vulnerabilities detected"
            npm audit --audit-level high --json | jq '.vulnerabilities' || true
            exit 1
          fi

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Build status summary
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [lint, build, database, test, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.database.result }}" == "success" && \
                ("${{ needs.test.result }}" == "success" || "${{ needs.test.result }}" == "skipped") && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Build: ${{ needs.build.result }}" 
            echo "Database: ${{ needs.database.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi