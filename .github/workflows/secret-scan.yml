name: Secret Scanning

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly secret scans
    - cron: '0 3 * * 2'

jobs:
  secret-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.71.0
        continue-on-error: true
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Basic pattern-based secret detection
  pattern-scan:
    name: Pattern-based Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for common secret patterns
        run: |
          echo "üîç Scanning for potential secrets..."
          
          # Define patterns for common secrets
          PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}"
            "secret\s*=\s*['\"][^'\"]{16,}"
            "api[_-]?key\s*=\s*['\"][^'\"]{16,}"
            "private[_-]?key\s*=\s*['\"][^'\"]{32,}"
            "token\s*=\s*['\"][^'\"]{16,}"
            "access[_-]?token\s*=\s*['\"][^'\"]{16,}"
            "auth[_-]?token\s*=\s*['\"][^'\"]{16,}"
            "database[_-]?url\s*=\s*['\"]postgres://[^'\"]*:[^'\"]*@"
            "mongodb://[^:]*:[^@]*@"
          )
          
          FOUND_SECRETS=false
          
          for pattern in "${PATTERNS[@]}"; do
            if grep -rE "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" --exclude="secret-scan.yml"; then
              echo "‚ö†Ô∏è Potential secret found matching pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          # Check for common secret files
          SECRET_FILES=(".env" ".env.local" ".env.production" "secrets.json" "private.key" "id_rsa")
          
          for file in "${SECRET_FILES[@]}"; do
            if find . -name "$file" -not -path "./.git/*" -not -path "./node_modules/*" | grep -q .; then
              echo "‚ö†Ô∏è Potential secret file found: $file"
              FOUND_SECRETS=true
            fi
          done
          
          if [ "$FOUND_SECRETS" = true ]; then
            echo "‚ùå Potential secrets detected! Please review the findings above."
            echo "Consider using environment variables or a secret management service."
            exit 1
          else
            echo "‚úÖ No obvious secret patterns detected."
          fi

  # TON wallet security check
  ton-security:
    name: TON Security Check  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check TON integration security
        run: |
          echo "üîí Checking TON blockchain integration security..."
          
          # Check for hardcoded wallet addresses or private keys
          if grep -rE "(private.*key|seed.*phrase|mnemonic)" . --include="*.ts" --include="*.js" --exclude-dir=node_modules; then
            echo "‚ùå Potential hardcoded wallet credentials found!"
            exit 1
          fi
          
          # Check for proper environment variable usage
          if grep -rE "process\.env\.(TON_|WALLET_)" . --include="*.ts" --include="*.js" --exclude-dir=node_modules; then
            echo "‚úÖ TON configuration using environment variables"
          else
            echo "‚ö†Ô∏è No TON environment variables detected"
          fi
          
          # Check for secure TON Connect patterns
          if grep -rE "TonConnect|@tonconnect" . --include="*.ts" --include="*.js" --exclude-dir=node_modules; then
            echo "‚úÖ Using TON Connect for wallet integration"
          fi
          
          echo "‚úÖ TON security check completed"